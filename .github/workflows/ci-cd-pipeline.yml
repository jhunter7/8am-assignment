name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'


  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ./app
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ./app

      - name: Run Trivy image scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-image-results.sarif" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          sarif_file: 'trivy-image-results.sarif'


  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: staging
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to staging
        run: |
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/staging/deployment.yaml
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/webapp -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=webapp -n staging --timeout=300s
          SERVICE_URL=$(kubectl get service webapp-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          npm run test:smoke -- --base-url=http://$SERVICE_URL

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production with Argo Rollouts
        run: |
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/production/rollout.yaml
          kubectl apply -f k8s/production/
          kubectl rollout status rollout/webapp-rollout -n production --timeout=300s

      - name: Monitor canary deployment
        run: |
          kubectl wait --for=condition=ready pod -l app=webapp,version=canary -n production --timeout=300s
          npm run test:validation
          kubectl patch rollout webapp-rollout -n production --type='merge' -p='{"spec":{"strategy":{"canary":{"steps":[{"setWeight":25}]}}}}'

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check if package exists
        id: check-package
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ env.IMAGE_NAME }}")
          if echo "$response" | grep -q '"name"'; then
            echo "package-exists=true" >> $GITHUB_OUTPUT
          else
            echo "package-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete old container images
        if: steps.check-package.outputs.package-exists == 'true'
        uses: actions/delete-package-versions@v4
        continue-on-error: true
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: 'true'
          token: ${{ secrets.GITHUB_TOKEN }}